<?php

namespace core;

use \ReflectionParameter;
use \ReflectionMethod;

class ReflexMethod extends ReflectionMethod {

    var $params; // 所有参数 re 对像
    var $paramNames = [
        // 'name'=>[
        //     'position'=>'',
        //     'typeName'=>'',
        //     'hasType'=>false,
        // ],

    ]; // 所有 参数
    var $typeParams = [
        'name' => [

        ]
    ]; // 类型 参数

    function __construct($class, $name) {
        parent::__construct($class, $name);
        $this->params = $this->getParameters();
        $this->run();
    }

    private function run() {
        // var_dump($this->params);
        foreach ($this->params as $value) {
            $key = $value->getName();
            $position = $value->getPosition();
            $typeName = null;
            if ($value->hasType()) {
                $typeName = $value->getType()->getName();
            }
            $this->paramNames[$key] = [
                'position' => $position,
                'typeName' => $typeName
            ];
        }
    }

    function invokeArgs($object, array $args = []) {
        $routeVars = \core\Request::getRouteVar();
        $args = array_merge_recursive($args,$routeVars);
//        dd($args);
//        var_dump($this->paramNames);die;
        $data = [];
        $count = 0;
        foreach ($this->paramNames as $key => $val) {
            if ($val['typeName']) {
                $data[] = new $val['typeName'];
            } else {
//                $data[] = $args[$count++];
                $data[] = current($args);
                next($args);
            }

        }
        parent::invokeArgs($object, $data); // TODO: Change the autogenerated stub
    }

    function get() {

        return $this->paramNames;
    }

    /*
        ReflectionParameter :: getName - 获取参数名称
        ReflectionParameter :: getPosition - 获取参数位置
        ReflectionParameter :: getType - 获取参数的类型
        ReflectionParameter :: hasType - 检查参数是否具有类型

        dd($reflection->getConstructor()); // 获取 定义 参数名
        dd($reflection->getParameters()[0]->gettype()); // 获取 定义 参数名
        dd($reflection->getDeclaringClass () ); // 获取 必填参数 个数
        dd($reflection->getNumberOfRequiredParameters() ); // 获取 必填参数 个数
        dd($reflection->getNumberOfParameters()); // 获取定义 参数 个数

        $reflectionClass = new \ReflectionClass($controller);
        dd($reflectionClass->getMethod($ac)->getParameters()[0]->getName()); // 获取-> 类-> 方法-> 第一个参数-> 名字
        dd($reflectionClass->getMethod($ac)->getParameters()[0]->getType()->getName()); // 获取-> 类-> 方法-> 第一个参数-> 类型-> 类型名

        $a =  get_class_methods($controller); // 获取 类方法
        dd($a);


    */

}